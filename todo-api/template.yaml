AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for todo-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        TABLE_NAME: !Select [1, !Split ['/', !GetAtt TodoTable.Arn]]

Resources:
  TodoApi:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  TodoServiceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: todo_service.entrypoints.aws.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Events:

        TodoList:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: get
            Auth:
              Authorizer:
                MyCognitoAuthorizer
        TodoDetail:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: get
            Auth:
              Authorizer:
                MyCognitoAuthorizer
        TodoCreate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: post
            Auth:
              Authorizer:
                MyCognitoAuthorizer
        TodoUpdate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: put
            Auth:
              Authorizer:
                MyCognitoAuthorizer
        TodoDelete:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: delete
            Auth:
              Authorizer:
                MyCognitoAuthorizer

  TodoTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  MyCognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: "TodoUserPool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  MyCognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: "TodoUserPoolClient"
      GenerateSecret: false
      CallbackURLs: 
        - https://example.com/callback
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  MyCognitoUserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref MyCognitoUserPool 
      Domain: "todo-api-user-pool-domain"

  MyUserPoolUICustomization: 
    Type: AWS::Cognito::UserPoolUICustomizationAttachment 
    Properties: 
      UserPoolId: !Ref MyCognitoUserPool
      ClientId: !Ref MyCognitoUserPoolClient 



Outputs:
  TodoServiceFunction:
    Description: "TodoService Lambda Function ARN"
    Value: !GetAtt TodoServiceFunction.Arn
  TodoServiceFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt TodoServiceFunctionRole.Arn
  TodoTableArn:
    Description: "DynamoDB Arn"
    Value: !GetAtt TodoTable.Arn

